name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  NODE_VERSION: '18'
  BACKEND_PORT: 3000
  FRONTEND_PORT: 5173

jobs:
  # Backend Tests and Build
  backend:
    runs-on: ubuntu-latest
    
    services:
      mongodb:
        image: mongo:6.0
        env:
          MONGO_INITDB_ROOT_USERNAME: admin
          MONGO_INITDB_ROOT_PASSWORD: password
        ports:
          - 27017:27017
        options: >-
          --health-cmd "mongosh --eval 'db.adminCommand(\"ping\")'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: backend/package-lock.json

    - name: Install backend dependencies
      working-directory: ./backend
      run: npm ci

    - name: Create backend .env file
      working-directory: ./backend
      run: |
        cat > .env << EOF
        MONGODB_URL=mongodb://admin:password@localhost:27017/scheduling_project?authSource=admin
        JWT_ACCESS_TOKEN_SECRET=test_access_token_secret_key_for_ci_cd_pipeline
        JWT_REFRESH_TOKEN_SECRET=test_refresh_token_secret_key_for_ci_cd_pipeline
        ACCESS_TOKEN_EXPIRES_IN=15m
        REFRESH_TOKEN_EXPIRES_IN=7d
        PORT=3000
        NODE_ENV=test
        EMAIL_USER=
        EMAIL_PASS=
        WIT_API_KEY=
        MICROSOFT_SPEECH_KEY=
        MICROSOFT_SPEECH_REGION=
        EOF

    - name: Validate environment variables
      working-directory: ./backend
      run: node validate-env.js

    - name: Run backend tests
      working-directory: ./backend
      run: npm test

    - name: Run backend linting
      working-directory: ./backend
      run: npm run lint || echo "Linting not configured"

    - name: Build backend
      working-directory: ./backend
      run: npm run build || echo "Build script not configured"

  # Frontend Tests and Build
  frontend:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Install frontend dependencies
      working-directory: ./frontend
      run: npm ci

    - name: Run frontend tests
      working-directory: ./frontend
      run: npm test

    - name: Run frontend linting
      working-directory: ./frontend
      run: npm run lint

    - name: Build frontend
      working-directory: ./frontend
      run: npm run build

    - name: Upload frontend build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: frontend-build
        path: frontend/dist/
        retention-days: 7

  # E2E Tests
  e2e-tests:
    runs-on: ubuntu-latest
    needs: [backend, frontend]

    services:
      mongodb:
        image: mongo:6.0
        env:
          MONGO_INITDB_ROOT_USERNAME: admin
          MONGO_INITDB_ROOT_PASSWORD: password
        ports:
          - 27017:27017

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: |
        cd backend && npm ci
        cd ../frontend && npm ci

    - name: Create backend .env file
      working-directory: ./backend
      run: |
        cat > .env << EOF
        MONGODB_URL=mongodb://admin:password@localhost:27017/scheduling_project?authSource=admin
        JWT_ACCESS_TOKEN_SECRET=test_access_token_secret_key_for_e2e_tests
        JWT_REFRESH_TOKEN_SECRET=test_refresh_token_secret_key_for_e2e_tests
        ACCESS_TOKEN_EXPIRES_IN=15m
        REFRESH_TOKEN_EXPIRES_IN=7d
        PORT=3000
        NODE_ENV=test
        EMAIL_USER=
        EMAIL_PASS=
        WIT_API_KEY=
        MICROSOFT_SPEECH_KEY=
        MICROSOFT_SPEECH_REGION=
        EOF

    - name: Start backend server
      working-directory: ./backend
      run: |
        npm start &
        sleep 10
        curl -f http://localhost:3000/api/v1/auth/me || exit 1

    - name: Build frontend
      working-directory: ./frontend
      run: npm run build

    - name: Install Playwright
      working-directory: ./frontend
      run: npx playwright install --with-deps

    - name: Run E2E tests
      working-directory: ./frontend
      run: npm run e2e

    - name: Upload E2E test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: e2e-test-results
        path: frontend/test-results/
        retention-days: 7

  # Security Scanning
  security:
    runs-on: ubuntu-latest
    needs: [backend, frontend]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: 'trivy-results.sarif'

  # Docker Build and Push
  docker:
    runs-on: ubuntu-latest
    needs: [backend, frontend, e2e-tests]
    if: github.ref == 'refs/heads/main'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        push: true
        tags: |
          ${{ secrets.DOCKER_USERNAME }}/scheduling-project:latest
          ${{ secrets.DOCKER_USERNAME }}/scheduling-project:${{ github.sha }}

  # Deploy to Production
  deploy:
    runs-on: ubuntu-latest
    needs: [docker]
    if: github.ref == 'refs/heads/main'

    steps:
    - name: Deploy to production
      run: |
        echo "Deploying to production..."
        # Add your deployment script here
        # This could be:
        # - Deploy to AWS ECS
        # - Deploy to Google Cloud Run
        # - Deploy to Azure Container Instances
        # - Deploy to DigitalOcean App Platform
        # - Deploy to Heroku
        # - Deploy to Railway
        # - Deploy to Render
        # - Deploy to Vercel
        # - Deploy to Netlify

  # Notification
  notify:
    runs-on: ubuntu-latest
    needs: [deploy]
    if: always()

    steps:
    - name: Notify deployment status
      run: |
        if [ "${{ needs.deploy.result }}" == "success" ]; then
          echo "✅ Deployment successful!"
        else
          echo "❌ Deployment failed!"
        fi
        # Add notification logic here (Slack, Discord, email, etc.)
