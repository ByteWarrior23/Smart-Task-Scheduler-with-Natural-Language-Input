{"version":3,"file":"JobsPage-DSGajG9O.js","sources":["../../node_modules/@mui/icons-material/esm/Info.js","../../node_modules/@mui/icons-material/esm/Pause.js","../../node_modules/@mui/icons-material/esm/Timer.js","../../src/modules/jobs/pages/JobsPage.jsx"],"sourcesContent":["\"use client\";\n\nimport createSvgIcon from \"./utils/createSvgIcon.js\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon(/*#__PURE__*/_jsx(\"path\", {\n  d: \"M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2m1 15h-2v-6h2zm0-8h-2V7h2z\"\n}), 'Info');","\"use client\";\n\nimport createSvgIcon from \"./utils/createSvgIcon.js\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon(/*#__PURE__*/_jsx(\"path\", {\n  d: \"M6 19h4V5H6zm8-14v14h4V5z\"\n}), 'Pause');","\"use client\";\n\nimport createSvgIcon from \"./utils/createSvgIcon.js\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon(/*#__PURE__*/_jsx(\"path\", {\n  d: \"M9 1h6v2H9zm10.03 6.39 1.42-1.42c-.43-.51-.9-.99-1.41-1.41l-1.42 1.42C16.07 4.74 14.12 4 12 4c-4.97 0-9 4.03-9 9s4.02 9 9 9 9-4.03 9-9c0-2.12-.74-4.07-1.97-5.61M13 14h-2V8h2z\"\n}), 'Timer');","import React, { useState, useMemo } from 'react';\r\nimport {\r\n  Box,\r\n  Typography,\r\n  Card,\r\n  CardContent,\r\n  Grid,\r\n  Button,\r\n  Alert,\r\n  Chip,\r\n  IconButton,\r\n  Tooltip,\r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  TableContainer,\r\n  TableHead,\r\n  TableRow,\r\n  Paper,\r\n  LinearProgress,\r\n  Dialog,\r\n  DialogTitle,\r\n  DialogContent,\r\n  DialogActions,\r\n  List,\r\n  ListItem,\r\n  ListItemText,\r\n  ListItemIcon,\r\n  Divider,\r\n  Stack,\r\n  Badge,\r\n} from '@mui/material';\r\nimport {\r\n  Refresh,\r\n  Schedule,\r\n  CheckCircle,\r\n  Error,\r\n  Warning,\r\n  Info,\r\n  PlayArrow,\r\n  Pause,\r\n  Stop,\r\n  Settings,\r\n  Email,\r\n  Notifications,\r\n  Timer,\r\n  TrendingUp,\r\n  TrendingDown,\r\n} from '@mui/icons-material';\r\nimport { useTaskQueries } from '../../../shared/hooks/useTaskQueries';\r\nimport { TaskPriority, TaskStatus } from '../../../shared/api/types';\r\n\r\nconst JobsPage = () => {\r\n  const [selectedTab, setSelectedTab] = useState(0);\r\n  const [showJobDetails, setShowJobDetails] = useState(false);\r\n  const [selectedJob, setSelectedJob] = useState(null);\r\n  const [autoRefresh, setAutoRefresh] = useState(true);\r\n\r\n  const { useGetReminderStats, useCheckDeadlines } = useTaskQueries();\r\n\r\n  const { data: reminderStats } = useGetReminderStats();\r\n\r\n  // Mock job data - would come from job monitoring API\r\n  const jobs = [\r\n    {\r\n      id: '1',\r\n      name: 'Deadline Reminder Check',\r\n      type: 'cron',\r\n      schedule: '*/30 * * * *', // Every 30 minutes\r\n      status: 'running',\r\n      lastRun: '2024-01-15T10:30:00Z',\r\n      nextRun: '2024-01-15T11:00:00Z',\r\n      successCount: 245,\r\n      failureCount: 2,\r\n      avgDuration: '150ms',\r\n      description: 'Checks for upcoming deadlines and sends reminder emails',\r\n    },\r\n    {\r\n      id: '2',\r\n      name: 'Overdue Task Check',\r\n      type: 'cron',\r\n      schedule: '10 * * * *', // Every hour at 10 minutes\r\n      status: 'running',\r\n      lastRun: '2024-01-15T10:10:00Z',\r\n      nextRun: '2024-01-15T11:10:00Z',\r\n      successCount: 168,\r\n      failureCount: 0,\r\n      avgDuration: '89ms',\r\n      description: 'Identifies overdue tasks and sends notifications',\r\n    },\r\n    {\r\n      id: '3',\r\n      name: 'Daily Summary',\r\n      type: 'cron',\r\n      schedule: '0 9 * * *', // Daily at 9 AM\r\n      status: 'running',\r\n      lastRun: '2024-01-15T09:00:00Z',\r\n      nextRun: '2024-01-16T09:00:00Z',\r\n      successCount: 15,\r\n      failureCount: 0,\r\n      avgDuration: '2.3s',\r\n      description: 'Sends daily task summary emails to users',\r\n    },\r\n    {\r\n      id: '4',\r\n      name: 'Email Queue Processor',\r\n      type: 'queue',\r\n      schedule: 'continuous',\r\n      status: 'running',\r\n      lastRun: '2024-01-15T10:45:00Z',\r\n      nextRun: 'continuous',\r\n      successCount: 1234,\r\n      failureCount: 12,\r\n      avgDuration: '45ms',\r\n      description: 'Processes outgoing email queue',\r\n    },\r\n    {\r\n      id: '5',\r\n      name: 'Database Cleanup',\r\n      type: 'cron',\r\n      schedule: '0 2 * * 0', // Weekly on Sunday at 2 AM\r\n      status: 'paused',\r\n      lastRun: '2024-01-14T02:00:00Z',\r\n      nextRun: '2024-01-21T02:00:00Z',\r\n      successCount: 8,\r\n      failureCount: 1,\r\n      avgDuration: '15.2s',\r\n      description: 'Cleans up old logs and temporary data',\r\n    },\r\n  ];\r\n\r\n  const jobHistory = [\r\n    {\r\n      id: '1',\r\n      jobId: '1',\r\n      status: 'success',\r\n      startedAt: '2024-01-15T10:30:00Z',\r\n      completedAt: '2024-01-15T10:30:00.150Z',\r\n      duration: '150ms',\r\n      result: 'Sent 3 reminder emails',\r\n    },\r\n    {\r\n      id: '2',\r\n      jobId: '2',\r\n      status: 'success',\r\n      startedAt: '2024-01-15T10:10:00Z',\r\n      completedAt: '2024-01-15T10:10:00.089Z',\r\n      duration: '89ms',\r\n      result: 'Found 0 overdue tasks',\r\n    },\r\n    {\r\n      id: '3',\r\n      jobId: '4',\r\n      status: 'error',\r\n      startedAt: '2024-01-15T10:45:00Z',\r\n      completedAt: '2024-01-15T10:45:00.200Z',\r\n      duration: '200ms',\r\n      result: 'Failed to send email: Invalid recipient',\r\n    },\r\n  ];\r\n\r\n  // Calculate job statistics\r\n  const jobStats = useMemo(() => {\r\n    const totalJobs = jobs.length;\r\n    const runningJobs = jobs.filter(j => j.status === 'running').length;\r\n    const pausedJobs = jobs.filter(j => j.status === 'paused').length;\r\n    const failedJobs = jobs.filter(j => j.status === 'failed').length;\r\n    const totalSuccess = jobs.reduce((sum, j) => sum + j.successCount, 0);\r\n    const totalFailures = jobs.reduce((sum, j) => sum + j.failureCount, 0);\r\n    const successRate = totalSuccess + totalFailures > 0 ? (totalSuccess / (totalSuccess + totalFailures)) * 100 : 0;\r\n\r\n    return {\r\n      totalJobs,\r\n      runningJobs,\r\n      pausedJobs,\r\n      failedJobs,\r\n      totalSuccess,\r\n      totalFailures,\r\n      successRate,\r\n    };\r\n  }, [jobs]);\r\n\r\n  const handleJobAction = (jobId, action) => {\r\n    console.log(`Job ${jobId} action: ${action}`);\r\n    // Mock job action logic\r\n  };\r\n\r\n  const handleViewJobDetails = (job) => {\r\n    setSelectedJob(job);\r\n    setShowJobDetails(true);\r\n  };\r\n\r\n  const formatSchedule = (schedule) => {\r\n    if (schedule === 'continuous') return 'Continuous';\r\n    if (schedule === 'manual') return 'Manual';\r\n    \r\n    // Parse cron expression and return human-readable format\r\n    const parts = schedule.split(' ');\r\n    if (parts.length === 5) {\r\n      const [minute, hour, day, month, weekday] = parts;\r\n      if (minute === '*/30' && hour === '*' && day === '*' && month === '*' && weekday === '*') {\r\n        return 'Every 30 minutes';\r\n      }\r\n      if (minute === '10' && hour === '*' && day === '*' && month === '*' && weekday === '*') {\r\n        return 'Every hour at 10 minutes';\r\n      }\r\n      if (minute === '0' && hour === '9' && day === '*' && month === '*' && weekday === '*') {\r\n        return 'Daily at 9:00 AM';\r\n      }\r\n      if (minute === '0' && hour === '2' && day === '*' && month === '*' && weekday === '0') {\r\n        return 'Weekly on Sunday at 2:00 AM';\r\n      }\r\n    }\r\n    return schedule;\r\n  };\r\n\r\n  const getStatusColor = (status) => {\r\n    switch (status) {\r\n      case 'running': return 'success';\r\n      case 'paused': return 'warning';\r\n      case 'failed': return 'error';\r\n      case 'success': return 'success';\r\n      case 'error': return 'error';\r\n      default: return 'default';\r\n    }\r\n  };\r\n\r\n  const getStatusIcon = (status) => {\r\n    switch (status) {\r\n      case 'running': return <PlayArrow />;\r\n      case 'paused': return <Pause />;\r\n      case 'failed': return <Error />;\r\n      case 'success': return <CheckCircle />;\r\n      case 'error': return <Error />;\r\n      default: return <Info />;\r\n    }\r\n  };\r\n\r\n  const tabs = [\r\n    { label: 'Overview', icon: <TrendingUp /> },\r\n    { label: 'Active Jobs', icon: <Schedule /> },\r\n    { label: 'Job History', icon: <Timer /> },\r\n    { label: 'Settings', icon: <Settings /> },\r\n  ];\r\n\r\n  return (\r\n    <Box sx={{ p: 3 }}>\r\n      <Box display=\"flex\" justifyContent=\"space-between\" alignItems=\"center\" mb={3}>\r\n        <Typography variant=\"h4\">Background Jobs</Typography>\r\n        <Box display=\"flex\" gap={1}>\r\n          <Tooltip title=\"Auto Refresh\">\r\n            <IconButton\r\n              color={autoRefresh ? 'primary' : 'default'}\r\n              onClick={() => setAutoRefresh(!autoRefresh)}\r\n            >\r\n              <Refresh />\r\n            </IconButton>\r\n          </Tooltip>\r\n          <Button\r\n            variant=\"outlined\"\r\n            startIcon={<Refresh />}\r\n            onClick={() => window.location.reload()}\r\n          >\r\n            Refresh All\r\n          </Button>\r\n        </Box>\r\n      </Box>\r\n\r\n      {/* Tab Navigation */}\r\n      <Paper sx={{ mb: 3 }}>\r\n        <Box display=\"flex\" gap={1} p={1}>\r\n          {tabs.map((tab, index) => (\r\n            <Button\r\n              key={index}\r\n              variant={selectedTab === index ? 'contained' : 'text'}\r\n              startIcon={tab.icon}\r\n              onClick={() => setSelectedTab(index)}\r\n              sx={{ minWidth: 120 }}\r\n            >\r\n              {tab.label}\r\n            </Button>\r\n          ))}\r\n        </Box>\r\n      </Paper>\r\n\r\n      {/* Overview Tab */}\r\n      {selectedTab === 0 && (\r\n        <Grid container spacing={3}>\r\n          <Grid item xs={12} sm={6} md={3}>\r\n            <Card>\r\n              <CardContent>\r\n                <Box display=\"flex\" alignItems=\"center\">\r\n                  <Schedule color=\"primary\" sx={{ mr: 2, fontSize: 40 }} />\r\n                  <Box>\r\n                    <Typography variant=\"h4\">{jobStats.totalJobs}</Typography>\r\n                    <Typography color=\"text.secondary\">Total Jobs</Typography>\r\n                  </Box>\r\n                </Box>\r\n              </CardContent>\r\n            </Card>\r\n          </Grid>\r\n          \r\n          <Grid item xs={12} sm={6} md={3}>\r\n            <Card>\r\n              <CardContent>\r\n                <Box display=\"flex\" alignItems=\"center\">\r\n                  <PlayArrow color=\"success\" sx={{ mr: 2, fontSize: 40 }} />\r\n                  <Box>\r\n                    <Typography variant=\"h4\">{jobStats.runningJobs}</Typography>\r\n                    <Typography color=\"text.secondary\">Running</Typography>\r\n                  </Box>\r\n                </Box>\r\n              </CardContent>\r\n            </Card>\r\n          </Grid>\r\n          \r\n          <Grid item xs={12} sm={6} md={3}>\r\n            <Card>\r\n              <CardContent>\r\n                <Box display=\"flex\" alignItems=\"center\">\r\n                  <Pause color=\"warning\" sx={{ mr: 2, fontSize: 40 }} />\r\n                  <Box>\r\n                    <Typography variant=\"h4\">{jobStats.pausedJobs}</Typography>\r\n                    <Typography color=\"text.secondary\">Paused</Typography>\r\n                  </Box>\r\n                </Box>\r\n              </CardContent>\r\n            </Card>\r\n          </Grid>\r\n          \r\n          <Grid item xs={12} sm={6} md={3}>\r\n            <Card>\r\n              <CardContent>\r\n                <Box display=\"flex\" alignItems=\"center\">\r\n                  <Error color=\"error\" sx={{ mr: 2, fontSize: 40 }} />\r\n                  <Box>\r\n                    <Typography variant=\"h4\">{jobStats.failedJobs}</Typography>\r\n                    <Typography color=\"text.secondary\">Failed</Typography>\r\n                  </Box>\r\n                </Box>\r\n              </CardContent>\r\n            </Card>\r\n          </Grid>\r\n\r\n          <Grid item xs={12} md={6}>\r\n            <Card>\r\n              <CardContent>\r\n                <Typography variant=\"h6\" gutterBottom>\r\n                  Success Rate\r\n                </Typography>\r\n                <Box display=\"flex\" alignItems=\"center\" gap={2}>\r\n                  <LinearProgress\r\n                    variant=\"determinate\"\r\n                    value={jobStats.successRate}\r\n                    sx={{ flex: 1, height: 8, borderRadius: 4 }}\r\n                  />\r\n                  <Typography variant=\"h6\">\r\n                    {jobStats.successRate.toFixed(1)}%\r\n                  </Typography>\r\n                </Box>\r\n                <Typography variant=\"body2\" color=\"text.secondary\" sx={{ mt: 1 }}>\r\n                  {jobStats.totalSuccess} successful, {jobStats.totalFailures} failed\r\n                </Typography>\r\n              </CardContent>\r\n            </Card>\r\n          </Grid>\r\n\r\n          <Grid item xs={12} md={6}>\r\n      <Card>\r\n        <CardContent>\r\n                <Typography variant=\"h6\" gutterBottom>\r\n                  System Health\r\n                </Typography>\r\n                <Stack spacing={1}>\r\n                  <Box display=\"flex\" justifyContent=\"space-between\" alignItems=\"center\">\r\n                    <Typography>Cron Scheduler</Typography>\r\n                    <Chip label=\"Healthy\" color=\"success\" size=\"small\" />\r\n                  </Box>\r\n                  <Box display=\"flex\" justifyContent=\"space-between\" alignItems=\"center\">\r\n                    <Typography>Email Queue</Typography>\r\n                    <Chip label=\"Healthy\" color=\"success\" size=\"small\" />\r\n                  </Box>\r\n                  <Box display=\"flex\" justifyContent=\"space-between\" alignItems=\"center\">\r\n                    <Typography>Database</Typography>\r\n                    <Chip label=\"Healthy\" color=\"success\" size=\"small\" />\r\n                  </Box>\r\n                  <Box display=\"flex\" justifyContent=\"space-between\" alignItems=\"center\">\r\n                    <Typography>Memory Usage</Typography>\r\n                    <Typography>45%</Typography>\r\n                  </Box>\r\n          </Stack>\r\n              </CardContent>\r\n            </Card>\r\n          </Grid>\r\n        </Grid>\r\n      )}\r\n\r\n      {/* Active Jobs Tab */}\r\n      {selectedTab === 1 && (\r\n        <Card>\r\n          <CardContent>\r\n            <Typography variant=\"h6\" gutterBottom>\r\n              Active Jobs\r\n            </Typography>\r\n            \r\n            <TableContainer>\r\n              <Table>\r\n                <TableHead>\r\n                  <TableRow>\r\n                    <TableCell>Job Name</TableCell>\r\n                    <TableCell>Type</TableCell>\r\n                    <TableCell>Schedule</TableCell>\r\n                    <TableCell>Status</TableCell>\r\n                    <TableCell>Last Run</TableCell>\r\n                    <TableCell>Next Run</TableCell>\r\n                    <TableCell>Success Rate</TableCell>\r\n                    <TableCell>Actions</TableCell>\r\n                  </TableRow>\r\n                </TableHead>\r\n                <TableBody>\r\n                  {jobs.map((job) => (\r\n                    <TableRow key={job.id}>\r\n                      <TableCell>\r\n                        <Box>\r\n                          <Typography variant=\"subtitle2\">{job.name}</Typography>\r\n                          <Typography variant=\"caption\" color=\"text.secondary\">\r\n                            {job.description}\r\n                          </Typography>\r\n                        </Box>\r\n                      </TableCell>\r\n                      <TableCell>\r\n                        <Chip\r\n                          label={job.type}\r\n                          color={job.type === 'cron' ? 'primary' : 'secondary'}\r\n                          size=\"small\"\r\n                        />\r\n                      </TableCell>\r\n                      <TableCell>{formatSchedule(job.schedule)}</TableCell>\r\n                      <TableCell>\r\n                        <Chip\r\n                          icon={getStatusIcon(job.status)}\r\n                          label={job.status}\r\n                          color={getStatusColor(job.status)}\r\n                          size=\"small\"\r\n                        />\r\n                      </TableCell>\r\n                      <TableCell>{new Date(job.lastRun).toLocaleString()}</TableCell>\r\n                      <TableCell>\r\n                        {job.nextRun === 'continuous' ? 'Continuous' : new Date(job.nextRun).toLocaleString()}\r\n                      </TableCell>\r\n                      <TableCell>\r\n                        <Box display=\"flex\" alignItems=\"center\" gap={1}>\r\n                          <Typography variant=\"body2\">\r\n                            {job.successCount}/{job.successCount + job.failureCount}\r\n                          </Typography>\r\n                          <LinearProgress\r\n                            variant=\"determinate\"\r\n                            value={(job.successCount / (job.successCount + job.failureCount)) * 100}\r\n                            sx={{ width: 50, height: 4 }}\r\n                          />\r\n                        </Box>\r\n                      </TableCell>\r\n                      <TableCell>\r\n                        <Tooltip title=\"View Details\">\r\n                          <IconButton\r\n                            size=\"small\"\r\n                            onClick={() => handleViewJobDetails(job)}\r\n                          >\r\n                            <Info />\r\n                          </IconButton>\r\n                        </Tooltip>\r\n                        {job.status === 'running' ? (\r\n                          <Tooltip title=\"Pause Job\">\r\n                            <IconButton\r\n                              size=\"small\"\r\n                              onClick={() => handleJobAction(job.id, 'pause')}\r\n                            >\r\n                              <Pause />\r\n                            </IconButton>\r\n                          </Tooltip>\r\n                        ) : (\r\n                          <Tooltip title=\"Start Job\">\r\n                            <IconButton\r\n                              size=\"small\"\r\n                              onClick={() => handleJobAction(job.id, 'start')}\r\n                            >\r\n                              <PlayArrow />\r\n                            </IconButton>\r\n                          </Tooltip>\r\n                        )}\r\n                        <Tooltip title=\"Stop Job\">\r\n                          <IconButton\r\n                            size=\"small\"\r\n                            color=\"error\"\r\n                            onClick={() => handleJobAction(job.id, 'stop')}\r\n                          >\r\n                            <Stop />\r\n                          </IconButton>\r\n                        </Tooltip>\r\n                      </TableCell>\r\n                    </TableRow>\r\n                  ))}\r\n                </TableBody>\r\n              </Table>\r\n            </TableContainer>\r\n          </CardContent>\r\n        </Card>\r\n      )}\r\n\r\n      {/* Job History Tab */}\r\n      {selectedTab === 2 && (\r\n        <Card>\r\n          <CardContent>\r\n            <Typography variant=\"h6\" gutterBottom>\r\n              Recent Job Executions\r\n            </Typography>\r\n            \r\n            <List>\r\n              {jobHistory.map((execution, index) => (\r\n                <React.Fragment key={execution.id}>\r\n                  <ListItem>\r\n                    <ListItemIcon>\r\n                      {getStatusIcon(execution.status)}\r\n                    </ListItemIcon>\r\n                    <ListItemText\r\n                      primary={\r\n                        <Box display=\"flex\" justifyContent=\"space-between\" alignItems=\"center\">\r\n                          <Typography variant=\"subtitle2\">\r\n                            {jobs.find(j => j.id === execution.jobId)?.name || 'Unknown Job'}\r\n                          </Typography>\r\n                          <Chip\r\n                            label={execution.status}\r\n                            color={getStatusColor(execution.status)}\r\n                            size=\"small\"\r\n                          />\r\n                        </Box>\r\n                      }\r\n                      secondary={\r\n                        <Box>\r\n                          <Typography variant=\"body2\" color=\"text.secondary\">\r\n                            Started: {new Date(execution.startedAt).toLocaleString()}\r\n                          </Typography>\r\n                          <Typography variant=\"body2\" color=\"text.secondary\">\r\n                            Duration: {execution.duration} | Result: {execution.result}\r\n                          </Typography>\r\n                        </Box>\r\n                      }\r\n                    />\r\n                  </ListItem>\r\n                  {index < jobHistory.length - 1 && <Divider />}\r\n                </React.Fragment>\r\n              ))}\r\n            </List>\r\n        </CardContent>\r\n      </Card>\r\n      )}\r\n\r\n      {/* Settings Tab */}\r\n      {selectedTab === 3 && (\r\n      <Card>\r\n        <CardContent>\r\n            <Typography variant=\"h6\" gutterBottom>\r\n              Job Scheduler Settings\r\n            </Typography>\r\n            \r\n            <Grid container spacing={2}>\r\n              <Grid item xs={12} md={6}>\r\n                <Paper sx={{ p: 2 }}>\r\n                  <Typography variant=\"subtitle1\" gutterBottom>\r\n                    Scheduler Configuration\r\n                  </Typography>\r\n                  <Stack spacing={1}>\r\n                    <Box display=\"flex\" justifyContent=\"space-between\">\r\n                      <Typography>Max Concurrent Jobs:</Typography>\r\n                      <Typography>5</Typography>\r\n                    </Box>\r\n                    <Box display=\"flex\" justifyContent=\"space-between\">\r\n                      <Typography>Job Timeout (minutes):</Typography>\r\n                      <Typography>30</Typography>\r\n                    </Box>\r\n                    <Box display=\"flex\" justifyContent=\"space-between\">\r\n                      <Typography>Retry Failed Jobs:</Typography>\r\n                      <Chip label=\"Enabled\" color=\"success\" size=\"small\" />\r\n                    </Box>\r\n                    <Box display=\"flex\" justifyContent=\"space-between\">\r\n                      <Typography>Max Retries:</Typography>\r\n                      <Typography>3</Typography>\r\n                    </Box>\r\n                    <Box display=\"flex\" justifyContent=\"space-between\">\r\n                      <Typography>Log Level:</Typography>\r\n                      <Typography>INFO</Typography>\r\n                    </Box>\r\n                  </Stack>\r\n                </Paper>\r\n              </Grid>\r\n              \r\n              <Grid item xs={12} md={6}>\r\n                <Paper sx={{ p: 2 }}>\r\n                  <Typography variant=\"subtitle1\" gutterBottom>\r\n                    Monitoring\r\n                  </Typography>\r\n                  <Stack spacing={1}>\r\n                    <Box display=\"flex\" justifyContent=\"space-between\">\r\n                      <Typography>Health Check Interval:</Typography>\r\n                      <Typography>5 minutes</Typography>\r\n                    </Box>\r\n                    <Box display=\"flex\" justifyContent=\"space-between\">\r\n                      <Typography>Alert on Failures:</Typography>\r\n                      <Chip label=\"Enabled\" color=\"success\" size=\"small\" />\r\n                    </Box>\r\n                    <Box display=\"flex\" justifyContent=\"space-between\">\r\n                      <Typography>Performance Monitoring:</Typography>\r\n                      <Chip label=\"Enabled\" color=\"success\" size=\"small\" />\r\n                    </Box>\r\n                    <Box display=\"flex\" justifyContent=\"space-between\">\r\n                      <Typography>Log Retention:</Typography>\r\n                      <Typography>30 days</Typography>\r\n                    </Box>\r\n          </Stack>\r\n                </Paper>\r\n              </Grid>\r\n            </Grid>\r\n        </CardContent>\r\n      </Card>\r\n      )}\r\n\r\n      {/* Job Details Dialog */}\r\n      <Dialog open={showJobDetails} onClose={() => setShowJobDetails(false)} maxWidth=\"md\" fullWidth>\r\n        <DialogTitle>\r\n          Job Details: {selectedJob?.name}\r\n        </DialogTitle>\r\n        <DialogContent>\r\n          {selectedJob && (\r\n            <Stack spacing={2}>\r\n              <Box>\r\n                <Typography variant=\"subtitle2\" gutterBottom>\r\n                  Description\r\n                </Typography>\r\n                <Typography variant=\"body2\">\r\n                  {selectedJob.description}\r\n                </Typography>\r\n              </Box>\r\n              \r\n              <Box>\r\n                <Typography variant=\"subtitle2\" gutterBottom>\r\n                  Schedule\r\n                </Typography>\r\n                <Typography variant=\"body2\">\r\n                  {formatSchedule(selectedJob.schedule)}\r\n                </Typography>\r\n              </Box>\r\n              \r\n              <Box>\r\n                <Typography variant=\"subtitle2\" gutterBottom>\r\n                  Statistics\r\n                </Typography>\r\n                <Grid container spacing={2}>\r\n                  <Grid item xs={6}>\r\n                    <Typography variant=\"body2\">Success Count: {selectedJob.successCount}</Typography>\r\n                  </Grid>\r\n                  <Grid item xs={6}>\r\n                    <Typography variant=\"body2\">Failure Count: {selectedJob.failureCount}</Typography>\r\n                  </Grid>\r\n                  <Grid item xs={6}>\r\n                    <Typography variant=\"body2\">Average Duration: {selectedJob.avgDuration}</Typography>\r\n                  </Grid>\r\n                  <Grid item xs={6}>\r\n                    <Typography variant=\"body2\">\r\n                      Success Rate: {((selectedJob.successCount / (selectedJob.successCount + selectedJob.failureCount)) * 100).toFixed(1)}%\r\n                    </Typography>\r\n                  </Grid>\r\n                </Grid>\r\n              </Box>\r\n              \r\n              <Box>\r\n                <Typography variant=\"subtitle2\" gutterBottom>\r\n                  Recent Executions\r\n                </Typography>\r\n                <List dense>\r\n                  {jobHistory.filter(h => h.jobId === selectedJob.id).slice(0, 5).map((execution) => (\r\n                    <ListItem key={execution.id}>\r\n                      <ListItemIcon>\r\n                        {getStatusIcon(execution.status)}\r\n                      </ListItemIcon>\r\n                      <ListItemText\r\n                        primary={new Date(execution.startedAt).toLocaleString()}\r\n                        secondary={`${execution.duration} - ${execution.result}`}\r\n                      />\r\n                    </ListItem>\r\n                  ))}\r\n                </List>\r\n              </Box>\r\n    </Stack>\r\n          )}\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button onClick={() => setShowJobDetails(false)}>\r\n            Close\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default JobsPage;"],"names":["Info","createSvgIcon","_jsx","Pause","Timer","JobsPage","selectedTab","setSelectedTab","useState","showJobDetails","setShowJobDetails","selectedJob","setSelectedJob","autoRefresh","setAutoRefresh","useGetReminderStats","useTaskQueries","reminderStats","jobs","jobHistory","jobStats","useMemo","totalJobs","runningJobs","j","pausedJobs","failedJobs","totalSuccess","sum","totalFailures","successRate","handleJobAction","jobId","action","handleViewJobDetails","job","formatSchedule","schedule","parts","minute","hour","day","month","weekday","getStatusColor","status","getStatusIcon","PlayArrow","Error","CheckCircle","tabs","jsx","TrendingUp","Schedule","Settings","Box","jsxs","Typography","Tooltip","IconButton","Refresh","Button","Paper","tab","index","Grid","Card","CardContent","LinearProgress","Stack","Chip","TableContainer","Table","TableHead","TableRow","TableCell","TableBody","Stop","List","execution","React","ListItem","ListItemIcon","ListItemText","_a","Divider","Dialog","DialogTitle","DialogContent","h","DialogActions"],"mappings":"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","x_google_ignoreList":[0,1,2]}