{"version":3,"file":"validation-pn9Iv5YD.js","sources":["../../node_modules/@mui/material/InputAdornment/inputAdornmentClasses.js","../../node_modules/@mui/material/InputAdornment/InputAdornment.js","../../src/shared/utils/validation.js"],"sourcesContent":["import generateUtilityClasses from '@mui/utils/generateUtilityClasses';\nimport generateUtilityClass from '@mui/utils/generateUtilityClass';\nexport function getInputAdornmentUtilityClass(slot) {\n  return generateUtilityClass('MuiInputAdornment', slot);\n}\nconst inputAdornmentClasses = generateUtilityClasses('MuiInputAdornment', ['root', 'filled', 'standard', 'outlined', 'positionStart', 'positionEnd', 'disablePointerEvents', 'hiddenLabel', 'sizeSmall']);\nexport default inputAdornmentClasses;","'use client';\n\nvar _span;\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport composeClasses from '@mui/utils/composeClasses';\nimport capitalize from \"../utils/capitalize.js\";\nimport Typography from \"../Typography/index.js\";\nimport FormControlContext from \"../FormControl/FormControlContext.js\";\nimport useFormControl from \"../FormControl/useFormControl.js\";\nimport { styled } from \"../zero-styled/index.js\";\nimport memoTheme from \"../utils/memoTheme.js\";\nimport { useDefaultProps } from \"../DefaultPropsProvider/index.js\";\nimport inputAdornmentClasses, { getInputAdornmentUtilityClass } from \"./inputAdornmentClasses.js\";\nimport { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nconst overridesResolver = (props, styles) => {\n  const {\n    ownerState\n  } = props;\n  return [styles.root, styles[`position${capitalize(ownerState.position)}`], ownerState.disablePointerEvents === true && styles.disablePointerEvents, styles[ownerState.variant]];\n};\nconst useUtilityClasses = ownerState => {\n  const {\n    classes,\n    disablePointerEvents,\n    hiddenLabel,\n    position,\n    size,\n    variant\n  } = ownerState;\n  const slots = {\n    root: ['root', disablePointerEvents && 'disablePointerEvents', position && `position${capitalize(position)}`, variant, hiddenLabel && 'hiddenLabel', size && `size${capitalize(size)}`]\n  };\n  return composeClasses(slots, getInputAdornmentUtilityClass, classes);\n};\nconst InputAdornmentRoot = styled('div', {\n  name: 'MuiInputAdornment',\n  slot: 'Root',\n  overridesResolver\n})(memoTheme(({\n  theme\n}) => ({\n  display: 'flex',\n  maxHeight: '2em',\n  alignItems: 'center',\n  whiteSpace: 'nowrap',\n  color: (theme.vars || theme).palette.action.active,\n  variants: [{\n    props: {\n      variant: 'filled'\n    },\n    style: {\n      [`&.${inputAdornmentClasses.positionStart}&:not(.${inputAdornmentClasses.hiddenLabel})`]: {\n        marginTop: 16\n      }\n    }\n  }, {\n    props: {\n      position: 'start'\n    },\n    style: {\n      marginRight: 8\n    }\n  }, {\n    props: {\n      position: 'end'\n    },\n    style: {\n      marginLeft: 8\n    }\n  }, {\n    props: {\n      disablePointerEvents: true\n    },\n    style: {\n      pointerEvents: 'none'\n    }\n  }]\n})));\nconst InputAdornment = /*#__PURE__*/React.forwardRef(function InputAdornment(inProps, ref) {\n  const props = useDefaultProps({\n    props: inProps,\n    name: 'MuiInputAdornment'\n  });\n  const {\n    children,\n    className,\n    component = 'div',\n    disablePointerEvents = false,\n    disableTypography = false,\n    position,\n    variant: variantProp,\n    ...other\n  } = props;\n  const muiFormControl = useFormControl() || {};\n  let variant = variantProp;\n  if (variantProp && muiFormControl.variant) {\n    if (process.env.NODE_ENV !== 'production') {\n      if (variantProp === muiFormControl.variant) {\n        console.error('MUI: The `InputAdornment` variant infers the variant prop ' + 'you do not have to provide one.');\n      }\n    }\n  }\n  if (muiFormControl && !variant) {\n    variant = muiFormControl.variant;\n  }\n  const ownerState = {\n    ...props,\n    hiddenLabel: muiFormControl.hiddenLabel,\n    size: muiFormControl.size,\n    disablePointerEvents,\n    position,\n    variant\n  };\n  const classes = useUtilityClasses(ownerState);\n  return /*#__PURE__*/_jsx(FormControlContext.Provider, {\n    value: null,\n    children: /*#__PURE__*/_jsx(InputAdornmentRoot, {\n      as: component,\n      ownerState: ownerState,\n      className: clsx(classes.root, className),\n      ref: ref,\n      ...other,\n      children: typeof children === 'string' && !disableTypography ? /*#__PURE__*/_jsx(Typography, {\n        color: \"textSecondary\",\n        children: children\n      }) : /*#__PURE__*/_jsxs(React.Fragment, {\n        children: [position === 'start' ? (/* notranslate needed while Google Translate will not fix zero-width space issue */_span || (_span = /*#__PURE__*/_jsx(\"span\", {\n          className: \"notranslate\",\n          \"aria-hidden\": true,\n          children: \"\\u200B\"\n        }))) : null, children]\n      })\n    })\n  });\n});\nprocess.env.NODE_ENV !== \"production\" ? InputAdornment.propTypes /* remove-proptypes */ = {\n  // ┌────────────────────────────── Warning ──────────────────────────────┐\n  // │ These PropTypes are generated from the TypeScript type definitions. │\n  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │\n  // └─────────────────────────────────────────────────────────────────────┘\n  /**\n   * The content of the component, normally an `IconButton` or string.\n   */\n  children: PropTypes.node,\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n  /**\n   * The component used for the root node.\n   * Either a string to use a HTML element or a component.\n   */\n  component: PropTypes.elementType,\n  /**\n   * Disable pointer events on the root.\n   * This allows for the content of the adornment to focus the `input` on click.\n   * @default false\n   */\n  disablePointerEvents: PropTypes.bool,\n  /**\n   * If children is a string then disable wrapping in a Typography component.\n   * @default false\n   */\n  disableTypography: PropTypes.bool,\n  /**\n   * The position this adornment should appear relative to the `Input`.\n   */\n  position: PropTypes.oneOf(['end', 'start']).isRequired,\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object]),\n  /**\n   * The variant to use.\n   * Note: If you are using the `TextField` component or the `FormControl` component\n   * you do not have to set this manually.\n   */\n  variant: PropTypes.oneOf(['filled', 'outlined', 'standard'])\n} : void 0;\nexport default InputAdornment;","// Validation utilities using Zod-like patterns\r\nexport const validationSchemas = {\r\n  login: {\r\n    username: { min: 3, max: 50, required: true },\r\n    password: { min: 6, required: true },\r\n  },\r\n  register: {\r\n    username: { min: 3, max: 16, required: true },\r\n    email: { pattern: /^\\w+([.-]?\\w+)*@\\w+([.-]?\\w+)*(\\.\\w{2,3})+$/, required: true },\r\n    fullname: { min: 1, max: 50, required: true },\r\n    password: { min: 8, required: true },\r\n  },\r\n  task: {\r\n    title: { min: 1, max: 100, required: true },\r\n    description: { min: 1, max: 1000, required: true },\r\n    priority: { enum: ['low', 'medium', 'high', 'urgent'], default: 'medium' },\r\n    status: { enum: ['pending', 'completed'], default: 'pending' },\r\n    category: { default: 'general' },\r\n    time_required: { min: 1, max: 10080 }, // Max 1 week in minutes\r\n  },\r\n};\r\n\r\nexport const validateField = (value, rules) => {\r\n  if (rules.required && (!value || value.toString().trim() === '')) {\r\n    return 'This field is required';\r\n  }\r\n\r\n  if (value && rules.min && value.toString().length < rules.min) {\r\n    return `Minimum length is ${rules.min} characters`;\r\n  }\r\n\r\n  if (value && rules.max && value.toString().length > rules.max) {\r\n    return `Maximum length is ${rules.max} characters`;\r\n  }\r\n\r\n  if (value && rules.pattern && !rules.pattern.test(value)) {\r\n    return 'Invalid format';\r\n  }\r\n\r\n  if (value && rules.enum && !rules.enum.includes(value)) {\r\n    return `Must be one of: ${rules.enum.join(', ')}`;\r\n  }\r\n\r\n  if (value && rules.min && typeof value === 'number' && value < rules.min) {\r\n    return `Minimum value is ${rules.min}`;\r\n  }\r\n\r\n  if (value && rules.max && typeof value === 'number' && value > rules.max) {\r\n    return `Maximum value is ${rules.max}`;\r\n  }\r\n\r\n  return null;\r\n};\r\n\r\nexport const validateForm = (data, schema) => {\r\n  const errors = {};\r\n  let isValid = true;\r\n\r\n  for (const [field, rules] of Object.entries(schema)) {\r\n    const error = validateField(data[field], rules);\r\n    if (error) {\r\n      errors[field] = error;\r\n      isValid = false;\r\n    }\r\n  }\r\n\r\n  return { errors, isValid };\r\n};\r\n\r\nexport const sanitizeInput = (input) => {\r\n  if (typeof input !== 'string') return input;\r\n  \r\n  return input\r\n    .trim()\r\n    .replace(/[<>]/g, '') // Remove potential HTML tags\r\n    .replace(/javascript:/gi, '') // Remove javascript: protocol\r\n    .replace(/on\\w+=/gi, ''); // Remove event handlers\r\n};\r\n\r\nexport const formatError = (error) => {\r\n  if (typeof error === 'string') return error;\r\n  if (error?.message) return error.message;\r\n  if (error?.response?.data?.message) return error.response.data.message;\r\n  return 'An unexpected error occurred';\r\n};"],"names":["getInputAdornmentUtilityClass","slot","generateUtilityClass","inputAdornmentClasses","generateUtilityClasses","_span","overridesResolver","props","styles","ownerState","capitalize","useUtilityClasses","classes","disablePointerEvents","hiddenLabel","position","size","variant","slots","composeClasses","InputAdornmentRoot","styled","memoTheme","theme","InputAdornment","React.forwardRef","inProps","ref","useDefaultProps","children","className","component","disableTypography","variantProp","other","muiFormControl","useFormControl","_jsx","FormControlContext","clsx","Typography","_jsxs","React.Fragment","validationSchemas","validateField","value","rules","validateForm","data","schema","errors","isValid","field","error"],"mappings":"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","x_google_ignoreList":[0,1]}