{"version":3,"file":"VoicePage-CH2K4rD9.js","sources":["../../src/modules/voice/pages/VoicePage.jsx"],"sourcesContent":["import React, { useState } from 'react';\r\nimport {\r\n  Box,\r\n  Typography,\r\n  Card,\r\n  CardContent,\r\n  Button,\r\n  Alert,\r\n  LinearProgress,\r\n  Chip,\r\n  Stack,\r\n  Divider,\r\n  IconButton,\r\n  Tooltip,\r\n  Paper,\r\n  Grid,\r\n} from '@mui/material';\r\nimport {\r\n  Mic,\r\n  MicOff,\r\n  Stop,\r\n  PlayArrow,\r\n  Pause,\r\n  Delete,\r\n  Upload,\r\n  VolumeUp,\r\n  VolumeOff,\r\n  Refresh,\r\n  CheckCircle,\r\n  Error,\r\n} from '@mui/icons-material';\r\nimport { useVoiceQueries } from '../../../shared/hooks/useVoiceQueries';\r\nimport { VoiceInput } from '../../../shared/components/VoiceComponents';\r\nimport { TaskForm } from '../../../shared/components/FormComponents';\r\nimport { TaskPriority } from '../../../shared/api/types';\r\n\r\nconst VoicePage = () => {\r\n  const [isRecording, setIsRecording] = useState(false);\r\n  const [isProcessing, setIsProcessing] = useState(false);\r\n  const [audioBlob, setAudioBlob] = useState(null);\r\n  const [transcription, setTranscription] = useState('');\r\n  const [parsedTask, setParsedTask] = useState(null);\r\n  const [error, setError] = useState(null);\r\n  const [recordingTime, setRecordingTime] = useState(0);\r\n  const [showTaskForm, setShowTaskForm] = useState(false);\r\n  const [taskHistory, setTaskHistory] = useState([]);\r\n  \r\n  const mediaRecorderRef = React.useRef(null);\r\n  const audioRef = React.useRef(null);\r\n  const intervalRef = React.useRef(null);\r\n\r\n  const { useTranscribeAudio, useParseVoice, useCreateTaskFromVoice } = useVoiceQueries();\r\n  const transcribeMutation = useTranscribeAudio();\r\n  const parseMutation = useParseVoice();\r\n  const createTaskMutation = useCreateTaskFromVoice();\r\n\r\n  const startRecording = async () => {\r\n    try {\r\n      const stream = await navigator.mediaDevices.getUserMedia({ audio: true });\r\n      const mediaRecorder = new MediaRecorder(stream);\r\n      mediaRecorderRef.current = mediaRecorder;\r\n      \r\n      const audioChunks = [];\r\n      \r\n      mediaRecorder.ondataavailable = (event) => {\r\n        audioChunks.push(event.data);\r\n      };\r\n      \r\n      mediaRecorder.onstop = () => {\r\n        const audioBlob = new Blob(audioChunks, { type: 'audio/wav' });\r\n        setAudioBlob(audioBlob);\r\n        stream.getTracks().forEach(track => track.stop());\r\n      };\r\n      \r\n      mediaRecorder.start();\r\n      setIsRecording(true);\r\n      setRecordingTime(0);\r\n      \r\n      // Start timer\r\n      intervalRef.current = setInterval(() => {\r\n        setRecordingTime(prev => prev + 1);\r\n      }, 1000);\r\n      \r\n    } catch (err) {\r\n      setError('Microphone access denied. Please allow microphone access and try again.');\r\n    }\r\n  };\r\n\r\n  const stopRecording = () => {\r\n    if (mediaRecorderRef.current && isRecording) {\r\n      mediaRecorderRef.current.stop();\r\n      setIsRecording(false);\r\n      if (intervalRef.current) {\r\n        clearInterval(intervalRef.current);\r\n      }\r\n    }\r\n  };\r\n\r\n  const processAudio = async (mode = 'transcribe') => {\r\n    if (!audioBlob) return;\r\n    \r\n    setIsProcessing(true);\r\n    setError(null);\r\n    \r\n    try {\r\n      const audioFile = new File([audioBlob], 'recording.wav', { type: 'audio/wav' });\r\n      \r\n      if (mode === 'transcribe') {\r\n        const result = await transcribeMutation.mutateAsync({ audioFile });\r\n        setTranscription(result.data.text);\r\n      } else if (mode === 'parse') {\r\n        const result = await parseMutation.mutateAsync({ audioFile });\r\n        setTranscription(result.data.transcribedText);\r\n        setParsedTask(result.data.parsedTask);\r\n      } else if (mode === 'create') {\r\n        const result = await createTaskMutation.mutateAsync({ audioFile });\r\n        setTranscription(result.data.transcribedText);\r\n        setParsedTask(result.data.parsedTask);\r\n        \r\n        // Add to task history\r\n        setTaskHistory(prev => [{\r\n          id: Date.now(),\r\n          task: result.data.task,\r\n          transcription: result.data.transcribedText,\r\n          timestamp: new Date(),\r\n        }, ...prev]);\r\n        \r\n        // Clear current recording\r\n        clearRecording();\r\n      }\r\n    } catch (err) {\r\n      setError(err.response?.data?.message || 'Failed to process audio. Please try again.');\r\n    } finally {\r\n      setIsProcessing(false);\r\n    }\r\n  };\r\n\r\n  const clearRecording = () => {\r\n    setAudioBlob(null);\r\n    setTranscription('');\r\n    setParsedTask(null);\r\n    setError(null);\r\n    setRecordingTime(0);\r\n  };\r\n\r\n  const playAudio = () => {\r\n    if (audioBlob && audioRef.current) {\r\n      const audioUrl = URL.createObjectURL(audioBlob);\r\n      audioRef.current.src = audioUrl;\r\n      audioRef.current.play();\r\n    }\r\n  };\r\n\r\n  const formatTime = (seconds) => {\r\n    const mins = Math.floor(seconds / 60);\r\n    const secs = seconds % 60;\r\n    return `${mins}:${secs.toString().padStart(2, '0')}`;\r\n  };\r\n\r\n  const handleCreateTaskFromParsed = (taskData) => {\r\n    // This would typically call the create task API\r\n    console.log('Creating task from parsed data:', taskData);\r\n    setShowTaskForm(false);\r\n    setParsedTask(null);\r\n  };\r\n\r\n  return (\r\n    <Box sx={{ p: 3 }}>\r\n      <Typography variant=\"h4\" gutterBottom>\r\n        Voice Input\r\n      </Typography>\r\n      \r\n      <Typography variant=\"body1\" color=\"text.secondary\" sx={{ mb: 3 }}>\r\n        Use your voice to create tasks quickly and efficiently. The AI will automatically extract details like title, deadline, priority, and duration from your speech.\r\n      </Typography>\r\n\r\n      <Grid container spacing={3}>\r\n        {/* Voice Recording Section */}\r\n        <Grid item xs={12} md={8}>\r\n          <Card>\r\n            <CardContent>\r\n              <Typography variant=\"h6\" gutterBottom>\r\n                Voice Recording\r\n              </Typography>\r\n              \r\n              {error && (\r\n                <Alert severity=\"error\" sx={{ mb: 2 }}>\r\n                  {error}\r\n                </Alert>\r\n              )}\r\n\r\n              {/* Recording Controls */}\r\n              <Box display=\"flex\" alignItems=\"center\" gap={2} mb={2}>\r\n                {!isRecording ? (\r\n                  <Button\r\n                    variant=\"contained\"\r\n                    color=\"primary\"\r\n                    startIcon={<Mic />}\r\n                    onClick={startRecording}\r\n                    disabled={isProcessing}\r\n                    size=\"large\"\r\n                  >\r\n                    Start Recording\r\n                  </Button>\r\n                ) : (\r\n                  <Button\r\n                    variant=\"contained\"\r\n                    color=\"error\"\r\n                    startIcon={<Stop />}\r\n                    onClick={stopRecording}\r\n                    size=\"large\"\r\n                  >\r\n                    Stop Recording ({formatTime(recordingTime)})\r\n                  </Button>\r\n                )}\r\n\r\n                {audioBlob && (\r\n                  <>\r\n                    <Button\r\n                      variant=\"outlined\"\r\n                      startIcon={<PlayArrow />}\r\n                      onClick={playAudio}\r\n                      disabled={isProcessing}\r\n                    >\r\n                      Play\r\n                    </Button>\r\n                    \r\n                    <Button\r\n                      variant=\"outlined\"\r\n                      color=\"primary\"\r\n                      onClick={() => processAudio('transcribe')}\r\n                      disabled={isProcessing}\r\n                      startIcon={<Upload />}\r\n                    >\r\n                      {isProcessing ? 'Processing...' : 'Transcribe Only'}\r\n                    </Button>\r\n                    \r\n                    <Button\r\n                      variant=\"outlined\"\r\n                      color=\"secondary\"\r\n                      onClick={() => processAudio('parse')}\r\n                      disabled={isProcessing}\r\n                      startIcon={<Upload />}\r\n                    >\r\n                      {isProcessing ? 'Processing...' : 'Parse Task'}\r\n                    </Button>\r\n                    \r\n                    <Button\r\n                      variant=\"contained\"\r\n                      color=\"success\"\r\n                      onClick={() => processAudio('create')}\r\n                      disabled={isProcessing}\r\n                      startIcon={<CheckCircle />}\r\n                    >\r\n                      {isProcessing ? 'Creating...' : 'Create Task'}\r\n                    </Button>\r\n                    \r\n                    <IconButton\r\n                      color=\"error\"\r\n                      onClick={clearRecording}\r\n                      disabled={isProcessing}\r\n                    >\r\n                      <Delete />\r\n                    </IconButton>\r\n                  </>\r\n                )}\r\n              </Box>\r\n\r\n              {/* Processing Status */}\r\n              {isProcessing && (\r\n                <Box mb={2}>\r\n                  <Typography variant=\"body2\" color=\"text.secondary\" gutterBottom>\r\n                    Processing audio...\r\n                  </Typography>\r\n                  <LinearProgress />\r\n                </Box>\r\n              )}\r\n\r\n              {/* Audio Player */}\r\n              <audio ref={audioRef} style={{ display: 'none' }} />\r\n\r\n              {/* Transcription Results */}\r\n              {transcription && (\r\n                <Box mb={2}>\r\n                  <Divider sx={{ mb: 2 }} />\r\n                  <Typography variant=\"subtitle2\" gutterBottom>\r\n                    Transcription:\r\n                  </Typography>\r\n                  <Paper sx={{ p: 2, bgcolor: 'grey.50' }}>\r\n                    <Typography variant=\"body1\">\r\n                      {transcription}\r\n                    </Typography>\r\n                  </Paper>\r\n                </Box>\r\n              )}\r\n\r\n              {/* Parsed Task Results */}\r\n              {parsedTask && (\r\n                <Box mb={2}>\r\n                  <Typography variant=\"subtitle2\" gutterBottom>\r\n                    Parsed Task Details:\r\n                  </Typography>\r\n                  <Card variant=\"outlined\" sx={{ p: 2 }}>\r\n                    <Stack spacing={2}>\r\n                      <Box>\r\n                        <Typography variant=\"body2\" color=\"text.secondary\">\r\n                          Title:\r\n                        </Typography>\r\n                        <Typography variant=\"body1\">\r\n                          {parsedTask.title}\r\n                        </Typography>\r\n                      </Box>\r\n                      \r\n                      <Box>\r\n                        <Typography variant=\"body2\" color=\"text.secondary\">\r\n                          Description:\r\n                        </Typography>\r\n                        <Typography variant=\"body1\">\r\n                          {parsedTask.description}\r\n                        </Typography>\r\n                      </Box>\r\n                      \r\n                      <Box display=\"flex\" gap={1} flexWrap=\"wrap\">\r\n                        <Chip\r\n                          label={`Priority: ${parsedTask.priority}`}\r\n                          color={parsedTask.priority === TaskPriority.URGENT ? 'error' : \r\n                                 parsedTask.priority === TaskPriority.HIGH ? 'warning' : 'default'}\r\n                          size=\"small\"\r\n                        />\r\n                        <Chip\r\n                          label={`Category: ${parsedTask.category}`}\r\n                          color=\"primary\"\r\n                          size=\"small\"\r\n                        />\r\n                        {parsedTask.time_required && (\r\n                          <Chip\r\n                            label={`Duration: ${parsedTask.time_required}m`}\r\n                            color=\"info\"\r\n                            size=\"small\"\r\n                          />\r\n                        )}\r\n                        {parsedTask.deadline && (\r\n                          <Chip\r\n                            label={`Deadline: ${new Date(parsedTask.deadline).toLocaleString()}`}\r\n                            color=\"secondary\"\r\n                            size=\"small\"\r\n                          />\r\n                        )}\r\n                      </Box>\r\n                      \r\n                      <Box>\r\n                        <Typography variant=\"body2\" color=\"text.secondary\">\r\n                          Confidence: {Math.round(parsedTask.confidence * 100)}%\r\n                        </Typography>\r\n                        <LinearProgress \r\n                          variant=\"determinate\" \r\n                          value={parsedTask.confidence * 100} \r\n                          sx={{ mt: 1 }}\r\n                        />\r\n                      </Box>\r\n                      \r\n                      <Button\r\n                        variant=\"contained\"\r\n                        onClick={() => setShowTaskForm(true)}\r\n                        startIcon={<CheckCircle />}\r\n                      >\r\n                        Create Task from Parsed Data\r\n                      </Button>\r\n                    </Stack>\r\n                  </Card>\r\n                </Box>\r\n              )}\r\n\r\n              {/* Instructions */}\r\n              <Box mt={2}>\r\n                <Typography variant=\"body2\" color=\"text.secondary\">\r\n                  <strong>Instructions:</strong>\r\n                </Typography>\r\n                <Typography variant=\"body2\" color=\"text.secondary\">\r\n                  • Click \"Start Recording\" to begin voice input\r\n                </Typography>\r\n                <Typography variant=\"body2\" color=\"text.secondary\">\r\n                  • Speak clearly and describe your task naturally\r\n                </Typography>\r\n                <Typography variant=\"body2\" color=\"text.secondary\">\r\n                  • Include details like deadline, priority, and duration\r\n                </Typography>\r\n                <Typography variant=\"body2\" color=\"text.secondary\">\r\n                  • Click \"Stop Recording\" when finished\r\n                </Typography>\r\n                <Typography variant=\"body2\" color=\"text.secondary\">\r\n                  • Choose to transcribe, parse, or create task directly\r\n                </Typography>\r\n              </Box>\r\n            </CardContent>\r\n          </Card>\r\n        </Grid>\r\n\r\n        {/* Task History Section */}\r\n        <Grid item xs={12} md={4}>\r\n          <Card>\r\n            <CardContent>\r\n              <Box display=\"flex\" justifyContent=\"space-between\" alignItems=\"center\" mb={2}>\r\n                <Typography variant=\"h6\">\r\n                  Recent Voice Tasks\r\n                </Typography>\r\n                <Tooltip title=\"Refresh\">\r\n                  <IconButton size=\"small\">\r\n                    <Refresh />\r\n                  </IconButton>\r\n                </Tooltip>\r\n              </Box>\r\n              \r\n              {taskHistory.length === 0 ? (\r\n                <Alert severity=\"info\">\r\n                  No voice-created tasks yet. Start recording to create your first task!\r\n                </Alert>\r\n              ) : (\r\n                <Stack spacing={2}>\r\n                  {taskHistory.slice(0, 5).map((item) => (\r\n                    <Paper key={item.id} sx={{ p: 2 }}>\r\n                      <Typography variant=\"subtitle2\" gutterBottom>\r\n                        {item.task.title}\r\n                      </Typography>\r\n                      <Typography variant=\"body2\" color=\"text.secondary\" sx={{ mb: 1 }}>\r\n                        \"{item.transcription}\"\r\n                      </Typography>\r\n                      <Box display=\"flex\" gap={1} flexWrap=\"wrap\">\r\n                        <Chip\r\n                          size=\"small\"\r\n                          label={item.task.priority}\r\n                          color={item.task.priority === TaskPriority.URGENT ? 'error' : \r\n                                 item.task.priority === TaskPriority.HIGH ? 'warning' : 'default'}\r\n                        />\r\n                        <Chip\r\n                          size=\"small\"\r\n                          label={item.task.category}\r\n                          color=\"primary\"\r\n                        />\r\n                      </Box>\r\n                      <Typography variant=\"caption\" color=\"text.secondary\" sx={{ mt: 1, display: 'block' }}>\r\n                        {item.timestamp.toLocaleString()}\r\n                      </Typography>\r\n                    </Paper>\r\n                  ))}\r\n                </Stack>\r\n              )}\r\n            </CardContent>\r\n          </Card>\r\n        </Grid>\r\n      </Grid>\r\n\r\n      {/* Task Form Modal */}\r\n      <TaskForm\r\n        open={showTaskForm}\r\n        onClose={() => setShowTaskForm(false)}\r\n        onSubmit={handleCreateTaskFromParsed}\r\n        initialData={parsedTask}\r\n        title=\"Create Task from Voice Input\"\r\n      />\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default VoicePage;"],"names":["VoicePage","isRecording","setIsRecording","useState","isProcessing","setIsProcessing","audioBlob","setAudioBlob","transcription","setTranscription","parsedTask","setParsedTask","error","setError","recordingTime","setRecordingTime","showTaskForm","setShowTaskForm","taskHistory","setTaskHistory","mediaRecorderRef","React","audioRef","intervalRef","useTranscribeAudio","useParseVoice","useCreateTaskFromVoice","useVoiceQueries","transcribeMutation","parseMutation","createTaskMutation","startRecording","stream","mediaRecorder","audioChunks","event","track","prev","stopRecording","processAudio","mode","audioFile","result","clearRecording","err","_b","_a","playAudio","audioUrl","formatTime","seconds","mins","secs","handleCreateTaskFromParsed","taskData","Box","jsx","Typography","jsxs","Grid","Card","CardContent","Alert","Button","Stop","Mic","Fragment","PlayArrow","Upload","CheckCircle","IconButton","Delete","LinearProgress","Divider","Paper","Stack","Chip","TaskPriority","Tooltip","Refresh","item","TaskForm"],"mappings":"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"}