{"version":3,"file":"useTaskQueries-Dyn3x2M3.js","sources":["../../src/shared/hooks/useTaskQueries.js"],"sourcesContent":["import { useMutation, useQuery, useQueryClient } from '@tanstack/react-query';\r\nimport { taskApi } from '../api/api';\r\n\r\n// Task Queries\r\nexport const useTaskQueries = () => {\r\n  const queryClient = useQueryClient();\r\n\r\n  const useGetTasks = (params = {}) => {\r\n    return useQuery({\r\n      queryKey: ['tasks', params],\r\n      queryFn: async () => {\r\n        const response = await taskApi.getAll(params);\r\n        return response.data;\r\n      },\r\n    });\r\n  };\r\n\r\n  const useGetTask = (id) => {\r\n    return useQuery({\r\n      queryKey: ['task', id],\r\n      queryFn: async () => {\r\n        const response = await taskApi.getById(id);\r\n        return response.data;\r\n      },\r\n      enabled: !!id,\r\n    });\r\n  };\r\n\r\n  const useCreateTask = () => {\r\n    return useMutation({\r\n      mutationFn: async (taskData) => {\r\n        const response = await taskApi.create(taskData);\r\n        return response.data;\r\n      },\r\n      onSuccess: () => {\r\n        queryClient.invalidateQueries(['tasks']);\r\n      },\r\n    });\r\n  };\r\n\r\n  const useUpdateTask = () => {\r\n    return useMutation({\r\n      mutationFn: async ({ id, ...taskData }) => {\r\n        const response = await taskApi.update(id, taskData);\r\n        return response.data;\r\n      },\r\n      onSuccess: () => {\r\n        queryClient.invalidateQueries(['tasks']);\r\n      },\r\n    });\r\n  };\r\n\r\n  const useDeleteTask = () => {\r\n    return useMutation({\r\n      mutationFn: async (id) => {\r\n        await taskApi.delete(id);\r\n      },\r\n      onSuccess: () => {\r\n        queryClient.invalidateQueries(['tasks']);\r\n      },\r\n    });\r\n  };\r\n\r\n  const useCompleteTask = () => {\r\n    return useMutation({\r\n      mutationFn: async (id) => {\r\n        const response = await taskApi.complete(id);\r\n        return response.data;\r\n      },\r\n      onSuccess: () => {\r\n        queryClient.invalidateQueries(['tasks']);\r\n      },\r\n    });\r\n  };\r\n\r\n  const useArchiveTask = () => {\r\n    return useMutation({\r\n      mutationFn: async (id) => {\r\n        const response = await taskApi.archive(id);\r\n        return response.data;\r\n      },\r\n      onSuccess: () => {\r\n        queryClient.invalidateQueries(['tasks']);\r\n      },\r\n    });\r\n  };\r\n\r\n  const useAddComment = () => {\r\n    return useMutation({\r\n      mutationFn: async ({ taskId, comment }) => {\r\n        const response = await taskApi.addComment(taskId, comment);\r\n        return response.data;\r\n      },\r\n      onSuccess: () => {\r\n        queryClient.invalidateQueries(['tasks']);\r\n      },\r\n    });\r\n  };\r\n\r\n  const useGetAnalytics = () => {\r\n    return useQuery({\r\n      queryKey: ['analytics'],\r\n      queryFn: async () => {\r\n        const response = await taskApi.getAnalytics();\r\n        return response.data;\r\n      },\r\n    });\r\n  };\r\n\r\n  const useGetReminderStats = () => {\r\n    return useQuery({\r\n      queryKey: ['reminder-stats'],\r\n      queryFn: async () => {\r\n        const response = await taskApi.getReminderStats();\r\n        return response.data;\r\n      },\r\n    });\r\n  };\r\n\r\n  const useBulkUpdate = () => {\r\n    return useMutation({\r\n      mutationFn: async ({ taskIds, updates }) => {\r\n        const response = await taskApi.bulkUpdate(taskIds, updates);\r\n        return response.data;\r\n      },\r\n      onSuccess: () => {\r\n        queryClient.invalidateQueries(['tasks']);\r\n      },\r\n    });\r\n  };\r\n\r\n  const useBulkDelete = () => {\r\n    return useMutation({\r\n      mutationFn: async (taskIds) => {\r\n        await taskApi.bulkDelete(taskIds);\r\n      },\r\n      onSuccess: () => {\r\n        queryClient.invalidateQueries(['tasks']);\r\n      },\r\n    });\r\n  };\r\n\r\n  return {\r\n    useGetTasks,\r\n    useGetTask,\r\n    useCreateTask,\r\n    useUpdateTask,\r\n    useDeleteTask,\r\n    useCompleteTask,\r\n    useArchiveTask,\r\n    useAddComment,\r\n    useGetAnalytics,\r\n    useGetReminderStats,\r\n    useBulkUpdate,\r\n    useBulkDelete,\r\n  };\r\n};"],"names":["useTaskQueries","queryClient","useQueryClient","params","useQuery","taskApi","id","useMutation","taskData","taskId","comment","taskIds","updates"],"mappings":"8DAIY,MAACA,EAAiB,IAAM,CAClC,MAAMC,EAAcC,IAyIpB,MAAO,CACL,YAxIkB,CAACC,EAAS,KACrBC,EAAS,CACd,SAAU,CAAC,QAASD,CAAM,EAC1B,QAAS,UACU,MAAME,EAAQ,OAAOF,CAAM,GAC5B,IAExB,CAAK,EAkID,WA/HkBG,GACXF,EAAS,CACd,SAAU,CAAC,OAAQE,CAAE,EACrB,QAAS,UACU,MAAMD,EAAQ,QAAQC,CAAE,GACzB,KAElB,QAAS,CAAC,CAACA,CACjB,CAAK,EAwHD,cArHoB,IACbC,EAAY,CACjB,WAAY,MAAOC,IACA,MAAMH,EAAQ,OAAOG,CAAQ,GAC9B,KAElB,UAAW,IAAM,CACfP,EAAY,kBAAkB,CAAC,OAAO,CAAC,CACzC,CACN,CAAK,EA6GD,cA1GoB,IACbM,EAAY,CACjB,WAAY,MAAO,CAAE,GAAAD,EAAI,GAAGE,CAAQ,KACjB,MAAMH,EAAQ,OAAOC,EAAIE,CAAQ,GAClC,KAElB,UAAW,IAAM,CACfP,EAAY,kBAAkB,CAAC,OAAO,CAAC,CACzC,CACN,CAAK,EAkGD,cA/FoB,IACbM,EAAY,CACjB,WAAY,MAAOD,GAAO,CACxB,MAAMD,EAAQ,OAAOC,CAAE,CACzB,EACA,UAAW,IAAM,CACfL,EAAY,kBAAkB,CAAC,OAAO,CAAC,CACzC,CACN,CAAK,EAwFD,gBArFsB,IACfM,EAAY,CACjB,WAAY,MAAOD,IACA,MAAMD,EAAQ,SAASC,CAAE,GAC1B,KAElB,UAAW,IAAM,CACfL,EAAY,kBAAkB,CAAC,OAAO,CAAC,CACzC,CACN,CAAK,EA6ED,eA1EqB,IACdM,EAAY,CACjB,WAAY,MAAOD,IACA,MAAMD,EAAQ,QAAQC,CAAE,GACzB,KAElB,UAAW,IAAM,CACfL,EAAY,kBAAkB,CAAC,OAAO,CAAC,CACzC,CACN,CAAK,EAkED,cA/DoB,IACbM,EAAY,CACjB,WAAY,MAAO,CAAE,OAAAE,EAAQ,QAAAC,MACV,MAAML,EAAQ,WAAWI,EAAQC,CAAO,GACzC,KAElB,UAAW,IAAM,CACfT,EAAY,kBAAkB,CAAC,OAAO,CAAC,CACzC,CACN,CAAK,EAuDD,gBApDsB,IACfG,EAAS,CACd,SAAU,CAAC,WAAW,EACtB,QAAS,UACU,MAAMC,EAAQ,gBACf,IAExB,CAAK,EA8CD,oBA3C0B,IACnBD,EAAS,CACd,SAAU,CAAC,gBAAgB,EAC3B,QAAS,UACU,MAAMC,EAAQ,oBACf,IAExB,CAAK,EAqCD,cAlCoB,IACbE,EAAY,CACjB,WAAY,MAAO,CAAE,QAAAI,EAAS,QAAAC,MACX,MAAMP,EAAQ,WAAWM,EAASC,CAAO,GAC1C,KAElB,UAAW,IAAM,CACfX,EAAY,kBAAkB,CAAC,OAAO,CAAC,CACzC,CACN,CAAK,EA0BD,cAvBoB,IACbM,EAAY,CACjB,WAAY,MAAOI,GAAY,CAC7B,MAAMN,EAAQ,WAAWM,CAAO,CAClC,EACA,UAAW,IAAM,CACfV,EAAY,kBAAkB,CAAC,OAAO,CAAC,CACzC,CACN,CAAK,CAgBL,CACA"}